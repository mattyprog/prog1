generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  role         Role      @default(CLIENT)
  passwordHash String
  avatarUrl    String?
  bio          String?
  createdAt    DateTime  @default(now())
  studios      Studio[]  @relation("OwnerStudios")
  bookings     Booking[]
  reviews      Review[]
  messagesFrom Message[] @relation("MessageFrom")
  messagesTo   Message[] @relation("MessageTo")
}

enum Role {
  CLIENT
  OWNER
  ADMIN
}

model Studio {
  id           Int         @id @default(autoincrement())
  owner        User        @relation("OwnerStudios", fields: [ownerId], references: [id])
  ownerId      Int
  name         String
  city         String
  address      String
  lat          Float
  lng          Float
  images       Json
  equipment    Json
  pricePerHour Float
  policy       String
  ratingAvg    Float       @default(0)
  createdAt    DateTime    @default(now())
  availabilities Availability[]
  bookings     Booking[]
  reviews      Review[]
}

model Availability {
  id         Int      @id @default(autoincrement())
  studio     Studio   @relation(fields: [studioId], references: [id])
  studioId   Int
  date       DateTime
  startTime  String
  endTime    String
  isBlocked  Boolean  @default(false)
}

model Booking {
  id             Int      @id @default(autoincrement())
  studio         Studio   @relation(fields: [studioId], references: [id])
  studioId       Int
  user           User     @relation(fields: [userId], references: [id])
  userId         Int
  date           DateTime
  startTime      String
  endTime        String
  totalPrice     Float
  status         BookingStatus  @default(PENDING)
  paymentIntentId String?
  review         Review?
  messages       Message[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Review {
  id        Int      @id @default(autoincrement())
  booking   Booking  @relation(fields: [bookingId], references: [id])
  bookingId Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  studio    Studio   @relation(fields: [studioId], references: [id])
  studioId  Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Message {
  id         Int      @id @default(autoincrement())
  booking    Booking  @relation(fields: [bookingId], references: [id])
  bookingId  Int
  fromUser   User     @relation("MessageFrom", fields: [fromUserId], references: [id])
  fromUserId Int
  toUser     User     @relation("MessageTo", fields: [toUserId], references: [id])
  toUserId   Int
  text       String
  createdAt  DateTime @default(now())
}